// Decompiled from: assembly
// Generated by 6502-to-Kotlin decompiler
// This is quick & dirty output - functional but not idiomatic

@file:Suppress("UNUSED_VARIABLE", "UNUSED_PARAMETER", "UNREACHABLE_CODE", "VARIABLE_WITH_REDUNDANT_INITIALIZER")
package decompiled

// 64KB address space
val memory = ByteArray(65536)

// CPU registers
var A = 0  // Accumulator
var X = 0  // Index X
var Y = 0  // Index Y
var SP = 0xFF  // Stack pointer

// CPU flags
var flagN = false  // Negative
var flagV = false  // Overflow
var flagZ = false  // Zero
var flagC = false  // Carry

fun CopyMemory() {
    // LDX #$00
    X = 0x0
    label_4@while (true) {
    // LDA $0200,X
    A = memory[/* $0200 */ + X]
    // STA $0300,X
    memory[/* $0300 */ + X] = A
    // INX
    X = (X + 1) and 0xFF
    // CPX #$10
    flagZ = (X == 0x10); flagN = (X < 0x10); flagC = (X >= 0x10)
    // BNE Loop
    if (/* branch condition */) continue@label_4
        break
    }
    label_9@while (true) {
    // RTS
    return
        break
    }
}

